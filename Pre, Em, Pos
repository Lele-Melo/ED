#include <stdio.h>
#include <stdlib.h>
struct no
{
    int info;
    struct no *esq, *dir;
};
 
typedef struct no No;
 
No *insere_no_abb(No *raiz, int info);
No *insere_no_abb_rec(No *raiz, No *novo);
No *cria_no(int info);
void pos_ordem(No *raiz);
int main()
{
    No* raiz=NULL;
    int n=0, n2=0, num=0;
    char virgula;
    scanf("%d", &n);
    for(int i=0; i<n; i++)
    {
        raiz=NULL;
        scanf("%d", &n2);
        for(int j=0; j<n2; j++)
        {
            scanf("%d %c", &num, &virgula);
            raiz = insere_no_abb(raiz, num);
 
        }
        for(int k=0; k<n2; k++)
        {
            scanf("%d %c", &num, &virgula);
        }
        pos_ordem(raiz);
        printf("\n");
        free(raiz);
    }
    printf("\n");
    /*raiz = insere_no_abb(raiz, 30);
    raiz = insere_no_abb(raiz, 10);
    raiz = insere_no_abb(raiz, 20);
    raiz = insere_no_abb(raiz, 5);
    raiz = insere_no_abb(raiz, 8);
    raiz = insere_no_abb(raiz, 25);
    raiz = insere_no_abb(raiz, 40);*/
    //raiz = insere_no_abb_rec(raiz, cria_no(50));
    //em_ordem(raiz);
 
    //raiz = remove_no(raiz,8);
    //raiz = remove_no(raiz,10);
 
    //em_ordem(raiz);
    return 0;
}
No *cria_no(int info)
{
    No *novo = malloc(sizeof(No));
    novo->info = info;
    novo->esq = novo->dir = NULL;
    return novo;
}
No *insere_no_abb_rec(No *raiz, No *novo)
{
 
    if (raiz == NULL)
        raiz = novo;
    else
        if (novo->info < raiz->info)
            raiz->esq = insere_no_abb_rec(raiz->esq, novo);
        else
            raiz->dir = insere_no_abb_rec(raiz->dir, novo);
    return raiz;
}
 
No *insere_no_abb(No *raiz, int info)
{
    No *novo = cria_no(info);
    No *p = NULL, *q = NULL;
    if (raiz == NULL)
    {
        raiz = novo;
    }
    else
    {
        q = raiz;
        while (q != NULL)
        {
            p = q;
            if (info < q->info)
                q = q->esq;
            else
                q = q->dir;
        }
        if (info < p->info)
            p->esq = novo;
        else
            p->dir = novo;
    }
    return raiz;
}
 
 
void pos_ordem(No *raiz)
{
    if (raiz != NULL)
    {
        pos_ordem(raiz->esq);
        pos_ordem(raiz->dir);
         printf("%d;", raiz->info);
    }
}
 
 
